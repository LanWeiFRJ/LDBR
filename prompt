Please generate a JUnit style Java test case based on the provided bug report, it should satisfy the requests below:

       - Use Java to reproduce the bug.
       - Contains **only JUnit style test code** without any Markdown or explanatory text.
       - If there is not any code in the original bug report, generate the code according to the description.
       - Use 'assert' function instead of directly print the result in the test case, such as "assertEquals("foo bar baz", actual)"

    An example of bug report and the corresponding test case is given below:

        Bug Report:
            Parsing a HTML snippet causes the leading text to be moved to back

            Code:

            String html = "foo <b>bar</b> baz";
            String text = Jsoup.parse(html).text();
            System.out.println(text);

            Result:

            bar baz foo

            Excepted:

            foo bar baz

        Test Case:
            import org.jsoup.Jsoup;
            import static org.junit.Assert.*;
            import org.junit.Test;

            public class HtmlParserBugTest {
                @Test
                public void testTextOrder() {
                    String html = "foo <b>bar</b> baz";
                    String actual = Jsoup.parse(html).text();
                    assertEquals("foo bar baz", actual);
                }
            }

    Ensure the scripts is free of any Markdown, descriptions, or comments. The output should be plain Java code.

    Bug Report:
    {bug_report_text}




——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

I will send you a bug report and a code generated by another agent:

        bug report:
        {bug_report_text}

        code:
        {code}

        Assuming that you are debating against that agent, please generate another code according to both the bug report and the given code.
        You answer should satisfy the requests below:

           - Use Java to reproduce the bug.
           - Contains **only JUnit style test code** without any Markdown or explanatory text.
           - If there is not any code in the original bug report, generate the code according to the description.
           - Pay attention to the version of the buggy repository to make sure your code could be correctly executed.

       An Example of bug report and corresponding test case is as below:

       Bug Report:
            Parsing a HTML snippet causes the leading text to be moved to back

            Code:

            String html = "foo <b>bar</b> baz";
            String text = Jsoup.parse(html).text();
            System.out.println(text);

            Result:

            bar baz foo

            Excepted:

            foo bar baz

       Test Case:
           import org.jsoup.Jsoup;
           import static org.junit.Assert.*;
           import org.junit.Test;

           public class HtmlParserBugTest {
               @Test
               public void testTextOrder() {
                   String html = "foo <b>bar</b> baz";
                   String actual = Jsoup.parse(html).text();
                   assertEquals("foo bar baz", actual);
               }
           }

       Ensure the scripts is free of any Markdown, descriptions, or comments. The output should be plain JUnit style Java code.



——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

1.Assuming that you are a senior bug-reproducing professor and you are debating against another bug-reproducing professor, according to the bug report, analyze the reproduction code I give you below, and list the flaws in your opponent's argument.

    Bug Report:

    {bug_report}

    Reproduction Code:

    {code}

2.Your answer should satisfy the requests below:

    - Thinking step by step, critique your opponent's argument and show your thinking process.
    - Generate your bug-reproducing code, and it should be in **JUnit style**.
    - Wrap the reproduced code you generate with markdown-style triple backticks (```), which is **extremely important**.

3.Here I will give you an example of bug reproduction:

    Bug Report:

    Parsing a HTML snippet causes the leading text to be moved to back

            BalusC opened on May 28, 2010

            Code:

                String html = "foo <b>bar</b> baz";
                String text = Jsoup.parse(html).text();
                System.out.println(text);

            Result:

                bar baz foo

            Excepted:

                foo bar baz

    Knowledge in bug reproduction:

    - Environment consistency: Choose correct repository version according to the time of the report.
    - Data and Input reproduction: Use the same data/input as the report did.

    Reproduction Code:

    ```
    import org.jsoup.Jsoup;
    import static org.junit.Assert.*;
    import org.junit.Test;

    public class HtmlParserBugTest {
        @Test
        public void testTextOrder() {
            String html = "foo <b>bar</b> baz";
            String actual = Jsoup.parse(html).text();
            assertEquals("foo bar baz", actual);
        }
    }
    ```
